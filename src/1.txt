#include <Arduino.h>
#include <PID.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

/* Controller parameters */
#define PID_KP 1.0f
#define PID_KI 0.01f
#define PID_KD 0.005f

#define PID_TAU 0.02f

#define PID_LIM_MIN 0.0f
#define PID_LIM_MAX 1000.00f

#define PID_LIM_MIN_INT -5.0f
#define PID_LIM_MAX_INT 5.0f

#define SAMPLE_TIME_S 0.01f

/* Maximum run-time of simulation */
#define SIMULATION_TIME_MAX 20.0f

/* I/O definitions */
#define KP A0 // Proportional gain
#define KI A1 // Integral gain
#define KD A2 // Derivative gain
#define SP 5  // Set point
#define CV 4  // Calculated value
#define SN A3 // Sensor value

// which analog pin to connect
#define THERMISTORPIN SN
// resistance at 25 degrees C
#define THERMISTORNOMINAL 10000
// temp. for nominal resistance (almost always 25 C)
#define TEMPERATURENOMINAL 25
// how many samples to take and average, more takes longer
// but is more 'smooth'
#define NUMSAMPLES 5
// The beta coefficient of the thermistor (usually 3000-4000)
#define BCOEFFICIENT 3950
// the value of the 'other' resistor
#define SERIESRESISTOR 10000

volatile bool detection = 0;
volatile long Value = 0;
volatile bool last_CH1_state = 0;
unsigned long timenow = 0;

int samples[NUMSAMPLES];

/* Simulated dynamical system (first order) */
float TestSystem_Update(float inp);

// Read and calculate KP
float readKP()
{
  return ((float)map(analogRead(KP), 0, 1023, 0, 300)) / 100.00f;
}

// Read and calculate KI
float readKI()
{
  return ((float)map(analogRead(KI), 0, 1023, 0, 2000)) / 10000.00f;
}

// Read and calculate KD
float readKD()
{
  return ((float)map(analogRead(KD), 0, 1023, 0, 2000)) / 10000.00f;
}

// Read and calculate KD
float readSP()
{
  return ((float)map(analogRead(SP), 0, 1023, 0, 500)) / 10.00f;
}

float measureTemp()
{
  uint8_t i;
  float average;

  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++)
  {
    samples[i] = analogRead(THERMISTORPIN);
    delay(10);
  }

  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++)
  {
    average += samples[i];
  }
  average /= NUMSAMPLES;

  // convert the value to resistance
  average = 1023 / average - 1;
  average = SERIESRESISTOR / average;

  float steinhart;
  steinhart = average / THERMISTORNOMINAL;          // (R/Ro)
  steinhart = log(steinhart);                       // ln(R/Ro)
  steinhart /= BCOEFFICIENT;                        // 1/B * ln(R/Ro)
  steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
  steinhart = 1.0 / steinhart;                      // Invert
  steinhart -= 273.15;                              // convert to C

  return steinhart;
}

/* Initialise PID controller */
PIDController pid = {PID_KP, PID_KI, PID_KD,
                     PID_TAU,
                     PID_LIM_MIN, PID_LIM_MAX,
                     PID_LIM_MIN_INT, PID_LIM_MAX_INT,
                     SAMPLE_TIME_S};

// Set the LCD address to 0x27 for a 20 chars and 4 line display
LiquidCrystal_I2C lcd(0x27, 20, 4);

void isr();

void setup()
{
  lcd.begin();
  lcd.backlight();
  PCICR |= (1 << PCIE0);
  PCMSK0 |= (1 << PCINT0);
  pinMode(KP, INPUT);
  pinMode(KI, INPUT);
  pinMode(KD, INPUT);
  pinMode(SP, INPUT);
  pinMode(CV, OUTPUT);
  pinMode(2, INPUT_PULLUP);

  PIDController_Init(&pid);

  // attachInterrupt(1, isr, RISING);
}
unsigned int zcd = 0;
void loop()
{
  float setpoint = 40.00f; // readSP();
  pid.Kp = readKP();
  pid.Ki = readKI();
  pid.Kd = readKD();
  float measurement = measureTemp();

  /* Compute new control signal */
  PIDController_Update(&pid, setpoint, measurement);

  lcd.setCursor(0, 0);
  lcd.print("SP:" + String(setpoint));
  lcd.setCursor(0, 1);
  lcd.print("KP:" + String(pid.Kp));
  lcd.setCursor(0, 2);
  lcd.print("KI:" + String(pid.Ki));
  lcd.setCursor(0, 3);
  lcd.print("KD:" + String(pid.Kd));
  lcd.setCursor(10, 0);
  lcd.print("TEMP:" + String(measurement));
  lcd.setCursor(10, 1);
  lcd.print("PID:" + String(pid.out));
  lcd.setCursor(10, 2);
  lcd.print("ZCD:" + String(zcd));
  lcd.setCursor(10, 3);
  lcd.print("TIM:" + String(millis() / 10));
  Value = map(readKP(), 0, 1023, 7600, 10);
  // Serial.println(String(setpoint) + "          " + String(pid.Kp) + "     " + String(pid.Ki) + "    " + String(pid.Kd) + "      " + String(measurement) + "         " + String(pid.out)+"\n");
}

// void isr()
// {
//   // delayMicroseconds(map(pid.out,0,1000,7200,200));

//   // digitalWrite(CV, LOW);
//   // delayMicroseconds(pid.out);

//   // digitalWrite(CV, HIGH);
//   // delayMicroseconds(pid.out);
//   zcd++;
// }

ISR(PCINT0_vect)
{
  Value = map(analogRead(A0), 6, 1014, 16200, 0);
  if (PINB & B00000001)
  { // We make an AND with the pin state register, We verify if pin 8 is HIGH???
    if (last_CH1_state == 0)
    {                // If the last state was 0, then we have a state change...
      detection = 1; // We haev detected a state change!
    }
   
  }
  else if (last_CH1_state == 1)
  {                     // If pin 8 is LOW and the last state was HIGH then we have a state change
    detection = 1;      // We haev detected a state change!
    last_CH1_state = 0; // Store the current state into the last state for the next loop
  }
   if (detection)
    {
      delayMicroseconds(Value); // This delay controls the power
      digitalWrite(3, HIGH);
      delayMicroseconds(16200 - Value);
      digitalWrite(3, LOW);
      detection = 0;
    }
}